// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace XtramileAutomation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Computer_database")]
    public partial class Computer_DatabaseFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Computer_database.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Computer_database", "As a user, I want to be able to view and manage a list of computers.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User should be able to search a computer database")]
        [NUnit.Framework.CategoryAttribute("positive_case")]
        [NUnit.Framework.CategoryAttribute("search_computer")]
        public virtual void UserShouldBeAbleToSearchAComputerDatabase()
        {
            string[] tagsOfScenario = new string[] {
                    "positive_case",
                    "search_computer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User should be able to search a computer database", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("I go to Computer Database Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When("I Type \"ASCI Purple\" in Computer Search Box", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "computer name",
                            "introduced",
                            "discontinued",
                            "company"});
                table1.AddRow(new string[] {
                            "ASCI Purple",
                            "01 Jan 2005",
                            "-",
                            "IBM"});
#line 9
 testRunner.Then("in the table computer contains", ((string)(null)), table1, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User should not be able to find computer data that is not in the database")]
        [NUnit.Framework.CategoryAttribute("negative_case")]
        [NUnit.Framework.CategoryAttribute("non_existing_computer")]
        public virtual void UserShouldNotBeAbleToFindComputerDataThatIsNotInTheDatabase()
        {
            string[] tagsOfScenario = new string[] {
                    "negative_case",
                    "non_existing_computer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User should not be able to find computer data that is not in the database", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
 testRunner.Given("I go to Computer Database Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
 testRunner.When("I Type \"NonExistingComputer\" in Computer Search Box", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.Then("the table should contain message Nothing to display", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("the user should have successfully created a new computer")]
        [NUnit.Framework.CategoryAttribute("create_computer")]
        public virtual void TheUserShouldHaveSuccessfullyCreatedANewComputer()
        {
            string[] tagsOfScenario = new string[] {
                    "create_computer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the user should have successfully created a new computer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
 testRunner.Given("I go to Computer Database Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
 testRunner.When("I click Add a new computer button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "computer name",
                            "introduced",
                            "discontinued",
                            "company"});
                table2.AddRow(new string[] {
                            "Lenovo Legion 5",
                            "2022-01-01",
                            "2023-01-01",
                            "IBM"});
#line 23
 testRunner.And("I enter the following details", ((string)(null)), table2, "And ");
#line hidden
#line 26
 testRunner.And("I click on the Create this computer button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.Then("a computer successfully \"created\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("the user should have successfully removed a computer from the database")]
        [NUnit.Framework.CategoryAttribute("positive_case")]
        [NUnit.Framework.CategoryAttribute("delete_computer")]
        public virtual void TheUserShouldHaveSuccessfullyRemovedAComputerFromTheDatabase()
        {
            string[] tagsOfScenario = new string[] {
                    "positive_case",
                    "delete_computer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the user should have successfully removed a computer from the database", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
 testRunner.Given("I go to Computer Database Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
 testRunner.When("I Type \"lenovo thinkpad r400\" in Computer Search Box", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "computer name",
                            "introduced",
                            "discontinued",
                            "company"});
                table3.AddRow(new string[] {
                            "lenovo thinkpad r400",
                            "-",
                            "-",
                            "-"});
#line 33
 testRunner.Then("in the table computer contains", ((string)(null)), table3, "Then ");
#line hidden
#line 36
 testRunner.And("I delete the computer that was searched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.Then("a computer successfully \"deleted\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The user should have successfully updated a computer")]
        [NUnit.Framework.CategoryAttribute("positive_case")]
        [NUnit.Framework.CategoryAttribute("update_computer")]
        public virtual void TheUserShouldHaveSuccessfullyUpdatedAComputer()
        {
            string[] tagsOfScenario = new string[] {
                    "positive_case",
                    "update_computer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The user should have successfully updated a computer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 41
 testRunner.Given("I go to Computer Database Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 42
 testRunner.When("I Type \"lenovo thinkpad r400\" in Computer Search Box", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "computer name",
                            "introduced",
                            "discontinued",
                            "company"});
                table4.AddRow(new string[] {
                            "lenovo thinkpad r400",
                            "-",
                            "-",
                            "-"});
#line 43
 testRunner.Then("in the table computer contains", ((string)(null)), table4, "Then ");
#line hidden
#line 46
 testRunner.And("I updated the computer that was searched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "computer name",
                            "introduced",
                            "discontinued",
                            "company"});
                table5.AddRow(new string[] {
                            "lenovo thinkpad Gaming",
                            "2022-01-01",
                            "2023-01-01",
                            "IBM"});
#line 47
 testRunner.When("I enter the following details", ((string)(null)), table5, "When ");
#line hidden
#line 50
 testRunner.And("I click on the Save this computer button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.Then("a computer successfully \"updated\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("user should fail to create a new computer if computer name is empty")]
        [NUnit.Framework.CategoryAttribute("negative_case")]
        [NUnit.Framework.CategoryAttribute("create_computer_empty_computername")]
        public virtual void UserShouldFailToCreateANewComputerIfComputerNameIsEmpty()
        {
            string[] tagsOfScenario = new string[] {
                    "negative_case",
                    "create_computer_empty_computername"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("user should fail to create a new computer if computer name is empty", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 55
 testRunner.Given("I go to Computer Database Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 56
 testRunner.When("I click Add a new computer button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "computer name",
                            "introduced",
                            "discontinued",
                            "company"});
                table6.AddRow(new string[] {
                            "",
                            "2022-01-01",
                            "2023-01-01",
                            "IBM"});
#line 57
 testRunner.And("I enter the following details", ((string)(null)), table6, "And ");
#line hidden
#line 60
 testRunner.And("I click on the Create this computer button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.Then("in the computer field \"name\" an error message will appear \"Failed to refine type " +
                        ": Predicate isEmpty() did not fail.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("user should fail to create a new computer if Discontinued date is before introduc" +
            "tion date")]
        [NUnit.Framework.CategoryAttribute("negative_case")]
        [NUnit.Framework.CategoryAttribute("create_computer_fail_discontinued")]
        public virtual void UserShouldFailToCreateANewComputerIfDiscontinuedDateIsBeforeIntroductionDate()
        {
            string[] tagsOfScenario = new string[] {
                    "negative_case",
                    "create_computer_fail_discontinued"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("user should fail to create a new computer if Discontinued date is before introduc" +
                    "tion date", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 65
 testRunner.Given("I go to Computer Database Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 66
 testRunner.When("I click Add a new computer button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "computer name",
                            "introduced",
                            "discontinued",
                            "company"});
                table7.AddRow(new string[] {
                            "Lenovo Legion 5",
                            "2022-01-01",
                            "2021-01-01",
                            "IBM"});
#line 67
 testRunner.And("I enter the following details", ((string)(null)), table7, "And ");
#line hidden
#line 70
 testRunner.And("I click on the Create this computer button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
 testRunner.Then("in the computer field \"discontinued\" an error message will appear \"Discontinued d" +
                        "ate is before introduction date\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("user should fail to create a new computer if Discontinued or introduced date use " +
            "wrong format")]
        [NUnit.Framework.CategoryAttribute("negative_case")]
        [NUnit.Framework.CategoryAttribute("create_computer_wrong_date_format")]
        public virtual void UserShouldFailToCreateANewComputerIfDiscontinuedOrIntroducedDateUseWrongFormat()
        {
            string[] tagsOfScenario = new string[] {
                    "negative_case",
                    "create_computer_wrong_date_format"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("user should fail to create a new computer if Discontinued or introduced date use " +
                    "wrong format", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 75
 testRunner.Given("I go to Computer Database Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 76
 testRunner.When("I click Add a new computer button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "computer name",
                            "introduced",
                            "discontinued",
                            "company"});
                table8.AddRow(new string[] {
                            "Lenovo Legion 5",
                            "2022/01/01",
                            "2021/01/01",
                            "IBM"});
#line 77
 testRunner.And("I enter the following details", ((string)(null)), table8, "And ");
#line hidden
#line 80
 testRunner.And("I click on the Create this computer button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
 testRunner.Then("the error message wrong date format will appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("user should fail to update a computer if computer name is empty")]
        [NUnit.Framework.CategoryAttribute("negative_case")]
        [NUnit.Framework.CategoryAttribute("update_computer_empty_computername")]
        public virtual void UserShouldFailToUpdateAComputerIfComputerNameIsEmpty()
        {
            string[] tagsOfScenario = new string[] {
                    "negative_case",
                    "update_computer_empty_computername"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("user should fail to update a computer if computer name is empty", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 85
 testRunner.Given("I go to Computer Database Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 86
 testRunner.When("I Type \"lenovo thinkpad r400\" in Computer Search Box", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "computer name",
                            "introduced",
                            "discontinued",
                            "company"});
                table9.AddRow(new string[] {
                            "lenovo thinkpad r400",
                            "-",
                            "-",
                            "-"});
#line 87
 testRunner.Then("in the table computer contains", ((string)(null)), table9, "Then ");
#line hidden
#line 90
 testRunner.And("I updated the computer that was searched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "computer name",
                            "introduced",
                            "discontinued",
                            "company"});
                table10.AddRow(new string[] {
                            "",
                            "2022-01-01",
                            "2023-01-01",
                            "IBM"});
#line 91
 testRunner.When("I enter the following details", ((string)(null)), table10, "When ");
#line hidden
#line 94
 testRunner.And("I click on the Save this computer button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
 testRunner.Then("in the computer field \"name\" an error message will appear \"Failed to refine type " +
                        ": Predicate isEmpty() did not fail.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("user should fail to update a computer if Discontinued date is before introduction" +
            " date")]
        [NUnit.Framework.CategoryAttribute("negative_case")]
        [NUnit.Framework.CategoryAttribute("update_computer_fail_discontinued")]
        public virtual void UserShouldFailToUpdateAComputerIfDiscontinuedDateIsBeforeIntroductionDate()
        {
            string[] tagsOfScenario = new string[] {
                    "negative_case",
                    "update_computer_fail_discontinued"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("user should fail to update a computer if Discontinued date is before introduction" +
                    " date", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 99
 testRunner.Given("I go to Computer Database Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 100
 testRunner.When("I Type \"lenovo thinkpad r400\" in Computer Search Box", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "computer name",
                            "introduced",
                            "discontinued",
                            "company"});
                table11.AddRow(new string[] {
                            "lenovo thinkpad r400",
                            "-",
                            "-",
                            "-"});
#line 101
 testRunner.Then("in the table computer contains", ((string)(null)), table11, "Then ");
#line hidden
#line 104
 testRunner.And("I updated the computer that was searched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "computer name",
                            "introduced",
                            "discontinued",
                            "company"});
                table12.AddRow(new string[] {
                            "Lenovo Legion 5",
                            "2022-01-01",
                            "2021-01-01",
                            "IBM"});
#line 105
 testRunner.When("I enter the following details", ((string)(null)), table12, "When ");
#line hidden
#line 108
 testRunner.And("I click on the Save this computer button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.Then("in the computer field \"discontinued\" an error message will appear \"Discontinued d" +
                        "ate is before introduction date\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("user should fail to update a computer if Discontinued or introduced date use wron" +
            "g format")]
        [NUnit.Framework.CategoryAttribute("negative_case")]
        [NUnit.Framework.CategoryAttribute("update_computer_wrong_date_format")]
        public virtual void UserShouldFailToUpdateAComputerIfDiscontinuedOrIntroducedDateUseWrongFormat()
        {
            string[] tagsOfScenario = new string[] {
                    "negative_case",
                    "update_computer_wrong_date_format"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("user should fail to update a computer if Discontinued or introduced date use wron" +
                    "g format", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 113
 testRunner.Given("I go to Computer Database Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 114
 testRunner.When("I Type \"lenovo thinkpad r400\" in Computer Search Box", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "computer name",
                            "introduced",
                            "discontinued",
                            "company"});
                table13.AddRow(new string[] {
                            "lenovo thinkpad r400",
                            "-",
                            "-",
                            "-"});
#line 115
 testRunner.Then("in the table computer contains", ((string)(null)), table13, "Then ");
#line hidden
#line 118
 testRunner.And("I updated the computer that was searched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "computer name",
                            "introduced",
                            "discontinued",
                            "company"});
                table14.AddRow(new string[] {
                            "Lenovo Legion 5",
                            "2022/01/01",
                            "2021/01/01",
                            "IBM"});
#line 119
 testRunner.When("I enter the following details", ((string)(null)), table14, "When ");
#line hidden
#line 122
 testRunner.And("I click on the Save this computer button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
 testRunner.Then("the error message wrong date format will appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
